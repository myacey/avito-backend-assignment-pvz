// Code generated by MockGen. DO NOT EDIT.
// Source: ./reception_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	request "github.com/myacey/avito-backend-assignment-pvz/internal/models/dto/request"
	entity "github.com/myacey/avito-backend-assignment-pvz/internal/models/entity"
)

// MockReceptionRepo is a mock of ReceptionRepo interface.
type MockReceptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepoMockRecorder
}

// MockReceptionRepoMockRecorder is the mock recorder for MockReceptionRepo.
type MockReceptionRepoMockRecorder struct {
	mock *MockReceptionRepo
}

// NewMockReceptionRepo creates a new mock instance.
func NewMockReceptionRepo(ctrl *gomock.Controller) *MockReceptionRepo {
	mock := &MockReceptionRepo{ctrl: ctrl}
	mock.recorder = &MockReceptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepo) EXPECT() *MockReceptionRepoMockRecorder {
	return m.recorder
}

// AddProductToReception mocks base method.
func (m *MockReceptionRepo) AddProductToReception(ctx context.Context, req *request.AddProduct, receptionID uuid.UUID) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToReception", ctx, req, receptionID)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductToReception indicates an expected call of AddProductToReception.
func (mr *MockReceptionRepoMockRecorder) AddProductToReception(ctx, req, receptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToReception", reflect.TypeOf((*MockReceptionRepo)(nil).AddProductToReception), ctx, req, receptionID)
}

// CreateReception mocks base method.
func (m *MockReceptionRepo) CreateReception(ctx context.Context, req *request.CreateReception) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, req)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionRepoMockRecorder) CreateReception(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReceptionRepo)(nil).CreateReception), ctx, req)
}

// DeleteProductInReception mocks base method.
func (m *MockReceptionRepo) DeleteProductInReception(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductInReception", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductInReception indicates an expected call of DeleteProductInReception.
func (mr *MockReceptionRepoMockRecorder) DeleteProductInReception(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductInReception", reflect.TypeOf((*MockReceptionRepo)(nil).DeleteProductInReception), ctx, productID)
}

// FinishReception mocks base method.
func (m *MockReceptionRepo) FinishReception(ctx context.Context, pvzID uuid.UUID) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishReception", ctx, pvzID)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishReception indicates an expected call of FinishReception.
func (mr *MockReceptionRepoMockRecorder) FinishReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishReception", reflect.TypeOf((*MockReceptionRepo)(nil).FinishReception), ctx, pvzID)
}

// GetLastOpenReception mocks base method.
func (m *MockReceptionRepo) GetLastOpenReception(ctx context.Context, pvzID uuid.UUID) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOpenReception", ctx, pvzID)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOpenReception indicates an expected call of GetLastOpenReception.
func (mr *MockReceptionRepoMockRecorder) GetLastOpenReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOpenReception", reflect.TypeOf((*MockReceptionRepo)(nil).GetLastOpenReception), ctx, pvzID)
}

// GetLastProductInReception mocks base method.
func (m *MockReceptionRepo) GetLastProductInReception(ctx context.Context, receptionID uuid.UUID) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProductInReception", ctx, receptionID)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProductInReception indicates an expected call of GetLastProductInReception.
func (mr *MockReceptionRepoMockRecorder) GetLastProductInReception(ctx, receptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProductInReception", reflect.TypeOf((*MockReceptionRepo)(nil).GetLastProductInReception), ctx, receptionID)
}

// SearchReceptions mocks base method.
func (m *MockReceptionRepo) SearchReceptions(ctx context.Context, req *request.SearchPvz, pvzIDs []uuid.UUID) ([]*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchReceptions", ctx, req, pvzIDs)
	ret0, _ := ret[0].([]*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchReceptions indicates an expected call of SearchReceptions.
func (mr *MockReceptionRepoMockRecorder) SearchReceptions(ctx, req, pvzIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchReceptions", reflect.TypeOf((*MockReceptionRepo)(nil).SearchReceptions), ctx, req, pvzIDs)
}

// MockPvzFinder is a mock of PvzFinder interface.
type MockPvzFinder struct {
	ctrl     *gomock.Controller
	recorder *MockPvzFinderMockRecorder
}

// MockPvzFinderMockRecorder is the mock recorder for MockPvzFinder.
type MockPvzFinderMockRecorder struct {
	mock *MockPvzFinder
}

// NewMockPvzFinder creates a new mock instance.
func NewMockPvzFinder(ctrl *gomock.Controller) *MockPvzFinder {
	mock := &MockPvzFinder{ctrl: ctrl}
	mock.recorder = &MockPvzFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPvzFinder) EXPECT() *MockPvzFinderMockRecorder {
	return m.recorder
}

// SearchPvz mocks base method.
func (m *MockPvzFinder) SearchPvz(ctx context.Context, req *request.SearchPvz) ([]*entity.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPvz", ctx, req)
	ret0, _ := ret[0].([]*entity.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPvz indicates an expected call of SearchPvz.
func (mr *MockPvzFinderMockRecorder) SearchPvz(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPvz", reflect.TypeOf((*MockPvzFinder)(nil).SearchPvz), ctx, req)
}
