// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/myacey/avito-backend-assignment-pvz/internal/models/entity"
)

// MockRoleCheckerMiddleware is a mock of RoleCheckerMiddleware interface.
type MockRoleCheckerMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockRoleCheckerMiddlewareMockRecorder
}

// MockRoleCheckerMiddlewareMockRecorder is the mock recorder for MockRoleCheckerMiddleware.
type MockRoleCheckerMiddlewareMockRecorder struct {
	mock *MockRoleCheckerMiddleware
}

// NewMockRoleCheckerMiddleware creates a new mock instance.
func NewMockRoleCheckerMiddleware(ctrl *gomock.Controller) *MockRoleCheckerMiddleware {
	mock := &MockRoleCheckerMiddleware{ctrl: ctrl}
	mock.recorder = &MockRoleCheckerMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleCheckerMiddleware) EXPECT() *MockRoleCheckerMiddlewareMockRecorder {
	return m.recorder
}

// AuthMiddleware mocks base method.
func (m *MockRoleCheckerMiddleware) AuthMiddleware(neededRole ...entity.Role) gin.HandlerFunc {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range neededRole {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthMiddleware", varargs...)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// AuthMiddleware indicates an expected call of AuthMiddleware.
func (mr *MockRoleCheckerMiddlewareMockRecorder) AuthMiddleware(neededRole ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMiddleware", reflect.TypeOf((*MockRoleCheckerMiddleware)(nil).AuthMiddleware), neededRole...)
}
