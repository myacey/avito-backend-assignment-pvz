// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pvz.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	entity "github.com/myacey/avito-backend-assignment-pvz/internal/models/entity"
)

const createPVZ = `-- name: CreatePVZ :one
INSERT INTO pvz (id, registration_date, city) VALUES
($1, $2, $3)
RETURNING id, registration_date, city
`

type CreatePVZParams struct {
	ID               uuid.UUID   `json:"id"`
	RegistrationDate time.Time   `json:"registration_date"`
	City             entity.City `json:"city"`
}

func (q *Queries) CreatePVZ(ctx context.Context, arg CreatePVZParams) (Pvz, error) {
	row := q.db.QueryRowContext(ctx, createPVZ, arg.ID, arg.RegistrationDate, arg.City)
	var i Pvz
	err := row.Scan(&i.ID, &i.RegistrationDate, &i.City)
	return i, err
}

const searchPVZ = `-- name: SearchPVZ :many
SELECT id, registration_date, city FROM pvz
OFFSET $1 LIMIT $2
`

type SearchPVZParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) SearchPVZ(ctx context.Context, arg SearchPVZParams) ([]Pvz, error) {
	rows, err := q.db.QueryContext(ctx, searchPVZ, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pvz{}
	for rows.Next() {
		var i Pvz
		if err := rows.Scan(&i.ID, &i.RegistrationDate, &i.City); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
