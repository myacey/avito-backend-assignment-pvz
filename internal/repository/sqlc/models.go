// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	entity "github.com/myacey/avito-backend-assignment-pvz/internal/models/entity"
)

type CityEnum string

const (
	CityEnumValue0 CityEnum = "Москва"
	CityEnumValue1 CityEnum = "СПб"
	CityEnumValue2 CityEnum = "Казань"
)

func (e *CityEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CityEnum(s)
	case string:
		*e = CityEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CityEnum: %T", src)
	}
	return nil
}

type NullCityEnum struct {
	CityEnum CityEnum `json:"city_enum"`
	Valid    bool     `json:"valid"` // Valid is true if CityEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCityEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CityEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CityEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCityEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CityEnum), nil
}

type ProductType string

const (
	ProductTypeValue0 ProductType = "электроника"
	ProductTypeValue1 ProductType = "одежда"
	ProductTypeValue2 ProductType = "обувь"
)

func (e *ProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductType(s)
	case string:
		*e = ProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductType: %T", src)
	}
	return nil
}

type NullProductType struct {
	ProductType ProductType `json:"product_type"`
	Valid       bool        `json:"valid"` // Valid is true if ProductType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductType), nil
}

type RoleEnum string

const (
	RoleEnumEmployee  RoleEnum = "employee"
	RoleEnumModerator RoleEnum = "moderator"
)

func (e *RoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleEnum(s)
	case string:
		*e = RoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleEnum: %T", src)
	}
	return nil
}

type NullRoleEnum struct {
	RoleEnum RoleEnum `json:"role_enum"`
	Valid    bool     `json:"valid"` // Valid is true if RoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleEnum), nil
}

type StatusEnum string

const (
	StatusEnumInProgress StatusEnum = "in_progress"
	StatusEnumClose      StatusEnum = "close"
)

func (e *StatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusEnum(s)
	case string:
		*e = StatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusEnum: %T", src)
	}
	return nil
}

type NullStatusEnum struct {
	StatusEnum StatusEnum `json:"status_enum"`
	Valid      bool       `json:"valid"` // Valid is true if StatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.StatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatusEnum), nil
}

type Product struct {
	ID          uuid.UUID   `json:"id"`
	DateTime    time.Time   `json:"date_time"`
	Type        ProductType `json:"type"`
	ReceptionID uuid.UUID   `json:"reception_id"`
}

type Pvz struct {
	ID               uuid.UUID   `json:"id"`
	RegistrationDate time.Time   `json:"registration_date"`
	City             entity.City `json:"city"`
}

type Reception struct {
	ID       uuid.UUID     `json:"id"`
	DateTime time.Time     `json:"date_time"`
	PvzID    uuid.UUID     `json:"pvz_id"`
	Status   entity.Status `json:"status"`
}

type User struct {
	ID       uuid.UUID   `json:"id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Role     entity.Role `json:"role"`
}
