// Code generated by MockGen. DO NOT EDIT.
// Source: ./reception_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/myacey/avito-backend-assignment-pvz/internal/repository/sqlc"
)

// MockReceptionQueries is a mock of ReceptionQueries interface.
type MockReceptionQueries struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionQueriesMockRecorder
}

// MockReceptionQueriesMockRecorder is the mock recorder for MockReceptionQueries.
type MockReceptionQueriesMockRecorder struct {
	mock *MockReceptionQueries
}

// NewMockReceptionQueries creates a new mock instance.
func NewMockReceptionQueries(ctrl *gomock.Controller) *MockReceptionQueries {
	mock := &MockReceptionQueries{ctrl: ctrl}
	mock.recorder = &MockReceptionQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionQueries) EXPECT() *MockReceptionQueriesMockRecorder {
	return m.recorder
}

// AddProductToReception mocks base method.
func (m *MockReceptionQueries) AddProductToReception(ctx context.Context, arg db.AddProductToReceptionParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToReception", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductToReception indicates an expected call of AddProductToReception.
func (mr *MockReceptionQueriesMockRecorder) AddProductToReception(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToReception", reflect.TypeOf((*MockReceptionQueries)(nil).AddProductToReception), ctx, arg)
}

// CreateReception mocks base method.
func (m *MockReceptionQueries) CreateReception(ctx context.Context, arg db.CreateReceptionParams) (db.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, arg)
	ret0, _ := ret[0].(db.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionQueriesMockRecorder) CreateReception(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReceptionQueries)(nil).CreateReception), ctx, arg)
}

// DeleteProduct mocks base method.
func (m *MockReceptionQueries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockReceptionQueriesMockRecorder) DeleteProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockReceptionQueries)(nil).DeleteProduct), ctx, id)
}

// FinishReception mocks base method.
func (m *MockReceptionQueries) FinishReception(ctx context.Context, pvzID uuid.UUID) (db.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishReception", ctx, pvzID)
	ret0, _ := ret[0].(db.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishReception indicates an expected call of FinishReception.
func (mr *MockReceptionQueriesMockRecorder) FinishReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishReception", reflect.TypeOf((*MockReceptionQueries)(nil).FinishReception), ctx, pvzID)
}

// GetLastProductInReception mocks base method.
func (m *MockReceptionQueries) GetLastProductInReception(ctx context.Context, receptionID uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProductInReception", ctx, receptionID)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProductInReception indicates an expected call of GetLastProductInReception.
func (mr *MockReceptionQueriesMockRecorder) GetLastProductInReception(ctx, receptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProductInReception", reflect.TypeOf((*MockReceptionQueries)(nil).GetLastProductInReception), ctx, receptionID)
}

// GetOpenReceptionByPvzID mocks base method.
func (m *MockReceptionQueries) GetOpenReceptionByPvzID(ctx context.Context, pvzID uuid.UUID) (db.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenReceptionByPvzID", ctx, pvzID)
	ret0, _ := ret[0].(db.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenReceptionByPvzID indicates an expected call of GetOpenReceptionByPvzID.
func (mr *MockReceptionQueriesMockRecorder) GetOpenReceptionByPvzID(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenReceptionByPvzID", reflect.TypeOf((*MockReceptionQueries)(nil).GetOpenReceptionByPvzID), ctx, pvzID)
}

// SearchReceptionsByPvzsAndTime mocks base method.
func (m *MockReceptionQueries) SearchReceptionsByPvzsAndTime(ctx context.Context, arg db.SearchReceptionsByPvzsAndTimeParams) ([]db.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchReceptionsByPvzsAndTime", ctx, arg)
	ret0, _ := ret[0].([]db.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchReceptionsByPvzsAndTime indicates an expected call of SearchReceptionsByPvzsAndTime.
func (mr *MockReceptionQueriesMockRecorder) SearchReceptionsByPvzsAndTime(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchReceptionsByPvzsAndTime", reflect.TypeOf((*MockReceptionQueries)(nil).SearchReceptionsByPvzsAndTime), ctx, arg)
}
